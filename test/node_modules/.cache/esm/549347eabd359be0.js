_bd3‍.x([["EngineCard",()=>EngineCard],["EngineCards",()=>EngineCards],["EngineStack",()=>EngineStack],["ENGINE_CONTROL_MAX_SIZE",()=>ENGINE_CONTROL_MAX_SIZE],["ENGINE_DECK_INIT_SIZE",()=>ENGINE_DECK_INIT_SIZE],["EngineControl",()=>EngineControl]]);var EngineCard = Object.freeze({
    H: 1,
    CNOT: 2,
    X: 3,
    SWAP: 4,
    PROBE: 5,
    initial_count: {
        1: 8,
        2: 7,
        3: 5,
        4: 3,
        5: 1
    }
})

       const EngineCards = [EngineCard.H, EngineCard.CNOT, EngineCard.X, EngineCard.SWAP, EngineCard.PROBE];

       class EngineStack {
    constructor() {
        this.never_reset = true;
        this.cardStack = new Map();

        EngineCards.forEach(card => this.cardStack.set(card, EngineCard.initial_count[card]));
    }

    empty() {
        return this.cardStack.size === 0;
    }

    reset(blue_deck, red_deck, mechanic_deck) {
        EngineCards.forEach(card => this.cardStack.set(card, EngineCard.initial_count[card]));
        function rm(card) {
            this.cardStack.set(card, this.cardStack.get(card) - 1);
        }

        blue_deck.forEach(rm);
        red_deck.forEach(rm);
        mechanic_deck.forEach(rm);

        this.never_reset = false;
    }

    draw () {
        var drawn = null;
        function rand() {
            var array = [];
            for (const [key, value] of this.cardStack.entries()) {
              for(let i = 0; i < value; ++i){
                array.push(key);
              }
            }

            return array[Math.floor(Math.random() * array.length)];
        }

        if (this.never_reset) {
            this.cardStack.delete(EngineCard.PROBE);
            if (this.empty()) {
                return EngineCard.PROBE;
            }
            drawn = rand();
            this.cardStack.set(EngineCard.PROBE, EngineCard.properties[EngineCard.PROBE]);
        } else {
            drawn = rand();
        }

        this.cardStack.set(drawn, this.cardStack.get(drawn) - 1);
        if (this.cardStack.get(drawn) === 0) {
            this.cardStack.delete(drawn);
        }

        return drawn;
    }
}

       const ENGINE_CONTROL_MAX_SIZE = 6;
       const ENGINE_DECK_INIT_SIZE = 3;

       class EngineControl {
    constructor() {
        this.control = [];
    }

    full() {
        this.control.length === ENGINE_CONTROL_MAX_SIZE;
    }

    add(engine_card) {
        if (this.full()) {
            throw new Error("Engine Control full, Engine Card cannot be added!");
        }
        self.control.push(engine_card);
    }

    reset() {
        this.control = [];
    }
}
